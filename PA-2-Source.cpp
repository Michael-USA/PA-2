// Daniel Forbes
// Donald Moor
// Michael Zuppardo


#include <iostream>
#include <vector>
#include <cstdlib>  // for generating random numbers and finding vector size
#include <fstream>  // for operating on csv and txt files
#include <chrono>   // for measuring time intervals
using namespace std;

// TODO: Implement time measurement and record results to excel. See sortAndPrintInnerVector
ofstream fout;
chrono::steady_clock::time_point t1; // start time
chrono::steady_clock::time_point t2; // end time

const int QUANT = 9;        // Number of vectors in the simulation.
const int SIZE = 1000;      // Size of the first vector.
vector<vector<int>> vec;    // Vector of vectors to hold the nine vectors.

// Takes a vector and prints it's elements
// TODO: Make output neater.
void printEntireVector(vector<int>& printVector) {

    vector<int> innerVec = printVector;

    cout << "\n\n[";
    for (int i = 0; i < innerVec.size() - 2; i++) {
        cout << innerVec[i] << ", ";
    }
    cout << innerVec[innerVec.size() - 1] << "]" << endl << endl;


}

// Overloaded method that allows one of the nine inner vectors
// to be selected and printed.
void printEntireVector(int index) {
    if (index < 0 || index >= vec.size()) {
        cout << "Invalid index!" << endl;
        return;
    }

    printEntireVector(vec[index]);
}

// Populates the nine inner vectors with 
// values between -16383 and 16384.
void populate() {
    for (vector<int>& innerVecs : vec) {
        for (int& element : innerVecs) {
            element = rand() % 32769 - 16384;
        }
    }
}

// Merge sort algorithm generated by ChatGPT: https://chat.openai.com/
// Takes a vector and merge sorts it.
void mergeSort(vector<int>& innerVec, int left, int right) {
    if (left < right) {
        int mid = (left + right) / 2;
        mergeSort(innerVec, left, mid);
        mergeSort(innerVec, mid + 1, right);
        vector<int> leftVec(innerVec.begin() + left, innerVec.begin() + mid + 1);
        vector<int> rightVec(innerVec.begin() + mid + 1, innerVec.begin() + right + 1);
        int i = 0, j = 0, k = left;
        while (i < leftVec.size() && j < rightVec.size()) {
            if (leftVec[i] < rightVec[j]) {
                innerVec[k] = leftVec[i];
                i++;
            }
            else {
                innerVec[k] = rightVec[j];
                j++;
            }
            k++;
        }
        while (i < leftVec.size()) {
            innerVec[k] = leftVec[i];
            i++;
            k++;
        }
        while (j < rightVec.size()) {
            innerVec[k] = rightVec[j];
            j++;
            k++;
        }
    }
}

// Takes in an index for one of the nine inner vectors. Then, makes
// a copy of that inner vector and runs the mergeSort method on it,
// and finally, prints the sorted vector with printEntireVector.
//
// TODO: 
// This is where the time recording code should be placed.
// I imagine all that needs to be done is to have the timer
// start right before the mergeSort method is called, and then
// stop right after.
void sortAndPrintInnerVector(int index) {
    vector<int> sortedCopy;
    sortedCopy.assign(vec[index].begin(), vec[index].end());
    mergeSort(sortedCopy, 0, sortedCopy.size() - 1);
    printEntireVector(sortedCopy);
}


int main() {
    
    // Explains the program before beginning.
    cout<< "This program generates " << QUANT << " vectors with n * "
        << SIZE << " elements, each of which can contain values between -16383 and 16384. "
        << "These vectors are then sorted with the merge-sort algorithm, and can be viewed "
        << "by entering a number between (1-9). Entering -1 quits the program." << endl;
    system("pause");

    // Generates the vectors.
    cout << "Generating vectors..." << endl;
    for (int n = 1; n <= QUANT; n++) {
        vector<int> innerVec(n * SIZE);
        vec.push_back(innerVec);
    }
    cout << "Vectors generated!" << endl;
    
    // User interface
    int index = 0;
    populate();
    while (index != -1) {
        cout << "Enter the index of the vector you wish to view (1 - 9): ";
        cin >> index;
        if (index >= 1 && index <= 9 ) {
            printEntireVector(index - 1);
            sortAndPrintInnerVector(index - 1);
        }
    }
    cout << "Program terminated!" << endl;
    system("pause");
    return 0;
}
