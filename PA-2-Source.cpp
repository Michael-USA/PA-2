// Daniel Forbes
// Donald Moor
// Michael Zuppardo


#include <iostream>
#include <vector>
#include <cstdlib> // for generating random numbers and finding vector size
#include <fstream> // for operating on csv and txt files
#include <chrono> // for measuring time intervals
#include <math.h> // for rounding and calculating logarithms
#include <string> // for manipulating strings
using namespace std;
ofstream fout;
chrono::steady_clock::time_point t1; // start time
chrono::steady_clock::time_point t2; // end time
int t3; // time difference
const int QUANT = 9; // Number of vectors in the simulation.
const int SIZE = 1000; // Size of the first vector.
vector<vector<int>> vec; // Vector of vectors to hold the nine vectors.

// Takes a vector and prints it's elements
// TODO: Make output neater.
void printEntireVector(vector<int>& printVector) {
    vector<int> innerVec = printVector;
    cout << "Printing entire vector: \n";
    cout << "\n\n[";
    for (int i = 0; i < innerVec.size() - 2; i++) {
        cout << innerVec[i] << ", ";
    }
    cout << innerVec[innerVec.size() - 1] << "]" << endl << endl;
}

// Overloaded method that allows one of the nine inner vectors
// to be selected and printed.
void printEntireVector(int index) {
    cout << "Printing the vector \n";
    if (index < 0 || index >= vec.size()) {
        cout << "Invalid index!" << endl;
        return;
    }
    printEntireVector(vec[index]);
}

// Populates the nine inner vectors with 
// values between -16383 and 16384.
void populate() {
    cout << "Populating the vectors...\n";
    for (vector<int>& innerVecs : vec) {
        for (int& element : innerVecs) {
            element = rand() % 32769 - 16384;
        }
    }
    cout << "Vectors populated!\n";
}

// Merge sort algorithm generated by ChatGPT: https://chat.openai.com/
// Takes a vector and merge sorts it.
void mergeSort(vector<int>& innerVec, int left, int right) {
    cout << "Merging vectors! \n";
    if (left < right) {
        int mid = (left + right) / 2;
        mergeSort(innerVec, left, mid);
        mergeSort(innerVec, mid + 1, right);
        vector<int> leftVec(innerVec.begin() + left, innerVec.begin() + mid + 1);
        vector<int> rightVec(innerVec.begin() + mid + 1, innerVec.begin() + right + 1);
        int i = 0, j = 0, k = left;
        while (i < leftVec.size() && j < rightVec.size()) {
            if (leftVec[i] < rightVec[j]) {
                innerVec[k] = leftVec[i];
                i++;
            }
            else {
                innerVec[k] = rightVec[j];
                j++;
            }
            k++;
        }
        while (i < leftVec.size()) {
            innerVec[k] = leftVec[i];
            i++;
            k++;
        }
        while (j < rightVec.size()) {
            innerVec[k] = rightVec[j];
            j++;
            k++;
        }
    }
}

// Takes in an index for one of the nine inner vectors. Then, makes
// a copy of that inner vector and runs the mergeSort method on it,
// and finally, prints the sorted vector with printEntireVector.
void sortAndPrintInnerVector(int index) {
    vector<int> sortedCopy;
    sortedCopy.assign(vec[index].begin(), vec[index].end());
    t1 = std::chrono::steady_clock::now();
    mergeSort(sortedCopy, 0, sortedCopy.size() - 1);
    t2 = std::chrono::steady_clock::now();
    int time = std::chrono::duration_cast<std::chrono::duration<int64_t, std::ratio<1, 1000/*milliseconds*/>>>(t2 - t1).count();
    t3 = time;
    printEntireVector(sortedCopy);
}

int zeroesAfterDecimal(double n)
{
    string s = to_string(n);
    bool pastDecimal = false;
    int j = 0;
    for (int i = 0; i < s.length(); ++i)
    {
        if (s[i] != '.' && s[i] != '0')
        {
            return j;
        }
        if (pastDecimal == true)
        {
            ++j;
        }
        if (s[i] == '.')
        {
            pastDecimal = true;
        }
    }
}

double sciNotation(double n)
{
    cout << "Input: " << n << "\n";
    int zad = zeroesAfterDecimal(n);
    n *= pow(10, zad);
    n = round(n);
    n /= pow(10, zad);
    cout << "Output: " << n << "\n";
    
    return n;
}


/******************************* main *******************************/

int main() {

    // Explains the program before beginning.
    cout << "This program generates " << QUANT << " vectors with n * "
        << SIZE << " elements, each of which can contain values between -16383 and 16384. "
        << "These vectors are then sorted with the merge-sort algorithm, and can be viewed "
        << "by entering a number between (1-9). Entering -1 quits the program." << endl;

    // Generates the vectors.
    cout << "Generating vectors..." << endl;
    for (int n = 1; n <= QUANT; n++) {
        vector<int> innerVec(n * SIZE);
        vec.push_back(innerVec);
    }
    cout << "Vectors generated!" << endl;

    // User interface
    int index = 0;
    populate();
    fout.open("Mergesort_Time.csv");
    fout << "Input size n for Array_i,Value of n * log(n),Time spent (milliseconds),Value of (n * log(n))/time\n";
    while (index != -1) {
        cout << "Enter the index of the vector you wish to view (1 - 9) or -1 to exit:\n";
        cin >> index;
        if (index >= 1 && index <= 9) {
            printEntireVector(index - 1);
            sortAndPrintInnerVector(index - 1);
            int isize = index * SIZE;
            fout << isize << ","                                // array size
                << isize * log(isize) << ","                    // array size * log(array size)
                << t3 << ","                                    // time
                << sciNotation((double)isize * log(isize) / t3) // (array size * log(array size))/time, scientific notation // (double)isize * log(isize) / t3
                << "\n";
        }
    }
    fout.close();
    cout << "Program terminated!" << endl;
    return 0;
}